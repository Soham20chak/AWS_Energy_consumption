---codes
CREATE EXTERNAL SCHEMA ENERGY_CONSUMPTION
FROM KINESIS
IAM_ROLE 'arn:aws:iam::896334692798:role/redshift-kinesis-role';


CREATE MATERIALIZED VIEW ENERGY AS
    SELECT approximate_arrival_timestamp,
    partition_key,
    shard_id,
    sequence_number,
    FROM_VARBYTE(kinesis_data, 'utf8') as payload    
    FROM ENERGY_CONSUMPTION.energy_data_stream;


select * from ENERGY


REFRESH MATERIALIZED VIEW ENERGY;
-- Calculate total energy consumption per location
SELECT location, SUM(energy_consumption) AS total_energy_consumption
FROM energy_data
GROUP BY location;

select payload."temperature",avg(payload."energy_consumed") from energy group by payload."temperature" order BY
payload."temperature" desc;

REFRESH MATERIALIZED VIEW ENERGY;
-- Calculate total energy consumption per location
SELECT payload."location", SUM(payload."energy_consumed") AS total_energy_consumption
FROM energy
GROUP BY payload."location" order by payload."location";

-- Visualize energy consumption trends over time
SELECT DATE_TRUNC('second', approximate_arrival_timestamp) AS time, AVG(payload."energy_consumed") AS avg_energy_consumption
FROM energy
GROUP BY DATE_TRUNC('second', approximate_arrival_timestamp)
ORDER BY time desc;

-- Calculate average energy consumption per location
SELECT payload."location",
       AVG(payload."energy_consumed") AS avg_energy_consumption
FROM energy
GROUP BY payload."location"
ORDER BY avg_energy_consumption DESC;

REFRESH MATERIALIZED VIEW ENERGY;
-- Identify abnormal energy consumption events (e.g., outliers)
SELECT payload."location", approximate_arrival_timestamp, payload."energy_consumed"
FROM energy
WHERE payload."energy_consumed" > 12
ORDER BY payload."energy_consumed" DESC;

REFRESH MATERIALIZED VIEW ENERGY;
-- Query to detect anomalies in energy consumption
SELECT
    timestamp_column,
    energy_consumed,
    CASE
        WHEN energy_consumed > (SELECT AVG(energy_consumed) FROM energy_data_table) * 2 THEN 'High Consumption'
        WHEN energy_consumed < (SELECT AVG(energy_consumed) FROM energy_data_table) * 0.5 THEN 'Low Consumption'
        ELSE 'Normal Consumption'
    END AS consumption_status
FROM
    energy_data_table
WHERE
    timestamp_column BETWEEN TIMESTAMP 'start_date_time' AND TIMESTAMP 'end_date_time';
In these queries:




